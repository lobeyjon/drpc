// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: defs.proto

#ifndef PROTOBUF_INCLUDED_defs_2eproto
#define PROTOBUF_INCLUDED_defs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_defs_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_defs_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_defs_2eproto();
namespace drpc {
class HelloServerRequest;
class HelloServerRequestDefaultTypeInternal;
extern HelloServerRequestDefaultTypeInternal _HelloServerRequest_default_instance_;
class HelloServerResponse;
class HelloServerResponseDefaultTypeInternal;
extern HelloServerResponseDefaultTypeInternal _HelloServerResponse_default_instance_;
class RPCHeader;
class RPCHeaderDefaultTypeInternal;
extern RPCHeaderDefaultTypeInternal _RPCHeader_default_instance_;
}  // namespace drpc
namespace google {
namespace protobuf {
template<> ::drpc::HelloServerRequest* Arena::CreateMaybeMessage<::drpc::HelloServerRequest>(Arena*);
template<> ::drpc::HelloServerResponse* Arena::CreateMaybeMessage<::drpc::HelloServerResponse>(Arena*);
template<> ::drpc::RPCHeader* Arena::CreateMaybeMessage<::drpc::RPCHeader>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace drpc {

// ===================================================================

class RPCHeader :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:drpc.RPCHeader) */ {
 public:
  RPCHeader();
  virtual ~RPCHeader();

  RPCHeader(const RPCHeader& from);

  inline RPCHeader& operator=(const RPCHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCHeader(RPCHeader&& from) noexcept
    : RPCHeader() {
    *this = ::std::move(from);
  }

  inline RPCHeader& operator=(RPCHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RPCHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCHeader* internal_default_instance() {
    return reinterpret_cast<const RPCHeader*>(
               &_RPCHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RPCHeader* other);
  friend void swap(RPCHeader& a, RPCHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCHeader* New() const final {
    return CreateMaybeMessage<RPCHeader>(nullptr);
  }

  RPCHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCHeader& from);
  void MergeFrom(const RPCHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string service_name = 1;
  bool has_service_name() const;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // required uint32 method_idx = 2;
  bool has_method_idx() const;
  void clear_method_idx();
  static const int kMethodIdxFieldNumber = 2;
  ::google::protobuf::uint32 method_idx() const;
  void set_method_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:drpc.RPCHeader)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::uint32 method_idx_;
  friend struct ::TableStruct_defs_2eproto;
};
// -------------------------------------------------------------------

class HelloServerRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:drpc.HelloServerRequest) */ {
 public:
  HelloServerRequest();
  virtual ~HelloServerRequest();

  HelloServerRequest(const HelloServerRequest& from);

  inline HelloServerRequest& operator=(const HelloServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloServerRequest(HelloServerRequest&& from) noexcept
    : HelloServerRequest() {
    *this = ::std::move(from);
  }

  inline HelloServerRequest& operator=(HelloServerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HelloServerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloServerRequest* internal_default_instance() {
    return reinterpret_cast<const HelloServerRequest*>(
               &_HelloServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HelloServerRequest* other);
  friend void swap(HelloServerRequest& a, HelloServerRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloServerRequest* New() const final {
    return CreateMaybeMessage<HelloServerRequest>(nullptr);
  }

  HelloServerRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HelloServerRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HelloServerRequest& from);
  void MergeFrom(const HelloServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloServerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:drpc.HelloServerRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  friend struct ::TableStruct_defs_2eproto;
};
// -------------------------------------------------------------------

class HelloServerResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:drpc.HelloServerResponse) */ {
 public:
  HelloServerResponse();
  virtual ~HelloServerResponse();

  HelloServerResponse(const HelloServerResponse& from);

  inline HelloServerResponse& operator=(const HelloServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloServerResponse(HelloServerResponse&& from) noexcept
    : HelloServerResponse() {
    *this = ::std::move(from);
  }

  inline HelloServerResponse& operator=(HelloServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HelloServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloServerResponse* internal_default_instance() {
    return reinterpret_cast<const HelloServerResponse*>(
               &_HelloServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(HelloServerResponse* other);
  friend void swap(HelloServerResponse& a, HelloServerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloServerResponse* New() const final {
    return CreateMaybeMessage<HelloServerResponse>(nullptr);
  }

  HelloServerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HelloServerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HelloServerResponse& from);
  void MergeFrom(const HelloServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloServerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:drpc.HelloServerResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  friend struct ::TableStruct_defs_2eproto;
};
// ===================================================================

class ServerService_Stub;

class ServerService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ServerService() {};
 public:
  virtual ~ServerService();

  typedef ServerService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void HelloServer(::google::protobuf::RpcController* controller,
                       const ::drpc::HelloServerRequest* request,
                       ::drpc::HelloServerResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ServerService);
};

class ServerService_Stub : public ServerService {
 public:
  ServerService_Stub(::google::protobuf::RpcChannel* channel);
  ServerService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ServerService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ServerService ------------------------------------------

  void HelloServer(::google::protobuf::RpcController* controller,
                       const ::drpc::HelloServerRequest* request,
                       ::drpc::HelloServerResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ServerService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPCHeader

// required string service_name = 1;
inline bool RPCHeader::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCHeader::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RPCHeader::service_name() const {
  // @@protoc_insertion_point(field_get:drpc.RPCHeader.service_name)
  return service_name_.GetNoArena();
}
inline void RPCHeader::set_service_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drpc.RPCHeader.service_name)
}
#if LANG_CXX11
inline void RPCHeader::set_service_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drpc.RPCHeader.service_name)
}
#endif
inline void RPCHeader::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drpc.RPCHeader.service_name)
}
inline void RPCHeader::set_service_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drpc.RPCHeader.service_name)
}
inline ::std::string* RPCHeader::mutable_service_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:drpc.RPCHeader.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCHeader::release_service_name() {
  // @@protoc_insertion_point(field_release:drpc.RPCHeader.service_name)
  if (!has_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return service_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCHeader::set_allocated_service_name(::std::string* service_name) {
  if (service_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:drpc.RPCHeader.service_name)
}

// required uint32 method_idx = 2;
inline bool RPCHeader::has_method_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPCHeader::clear_method_idx() {
  method_idx_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 RPCHeader::method_idx() const {
  // @@protoc_insertion_point(field_get:drpc.RPCHeader.method_idx)
  return method_idx_;
}
inline void RPCHeader::set_method_idx(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  method_idx_ = value;
  // @@protoc_insertion_point(field_set:drpc.RPCHeader.method_idx)
}

// -------------------------------------------------------------------

// HelloServerRequest

// required string text = 1;
inline bool HelloServerRequest::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloServerRequest::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& HelloServerRequest::text() const {
  // @@protoc_insertion_point(field_get:drpc.HelloServerRequest.text)
  return text_.GetNoArena();
}
inline void HelloServerRequest::set_text(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drpc.HelloServerRequest.text)
}
#if LANG_CXX11
inline void HelloServerRequest::set_text(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drpc.HelloServerRequest.text)
}
#endif
inline void HelloServerRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drpc.HelloServerRequest.text)
}
inline void HelloServerRequest::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drpc.HelloServerRequest.text)
}
inline ::std::string* HelloServerRequest::mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:drpc.HelloServerRequest.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloServerRequest::release_text() {
  // @@protoc_insertion_point(field_release:drpc.HelloServerRequest.text)
  if (!has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloServerRequest::set_allocated_text(::std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:drpc.HelloServerRequest.text)
}

// -------------------------------------------------------------------

// HelloServerResponse

// required string text = 1;
inline bool HelloServerResponse::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloServerResponse::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& HelloServerResponse::text() const {
  // @@protoc_insertion_point(field_get:drpc.HelloServerResponse.text)
  return text_.GetNoArena();
}
inline void HelloServerResponse::set_text(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drpc.HelloServerResponse.text)
}
#if LANG_CXX11
inline void HelloServerResponse::set_text(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drpc.HelloServerResponse.text)
}
#endif
inline void HelloServerResponse::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drpc.HelloServerResponse.text)
}
inline void HelloServerResponse::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drpc.HelloServerResponse.text)
}
inline ::std::string* HelloServerResponse::mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:drpc.HelloServerResponse.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloServerResponse::release_text() {
  // @@protoc_insertion_point(field_release:drpc.HelloServerResponse.text)
  if (!has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloServerResponse::set_allocated_text(::std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:drpc.HelloServerResponse.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_defs_2eproto
