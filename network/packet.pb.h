// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef PROTOBUF_INCLUDED_packet_2eproto
#define PROTOBUF_INCLUDED_packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packet_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_packet_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_packet_2eproto();
namespace drpc {
class Names;
class NamesDefaultTypeInternal;
extern NamesDefaultTypeInternal _Names_default_instance_;
}  // namespace drpc
namespace google {
namespace protobuf {
template<> ::drpc::Names* Arena::CreateMaybeMessage<::drpc::Names>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace drpc {

// ===================================================================

class Names :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:drpc.Names) */ {
 public:
  Names();
  virtual ~Names();

  Names(const Names& from);

  inline Names& operator=(const Names& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Names(Names&& from) noexcept
    : Names() {
    *this = ::std::move(from);
  }

  inline Names& operator=(Names&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Names& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Names* internal_default_instance() {
    return reinterpret_cast<const Names*>(
               &_Names_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Names* other);
  friend void swap(Names& a, Names& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Names* New() const final {
    return CreateMaybeMessage<Names>(nullptr);
  }

  Names* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Names>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Names& from);
  void MergeFrom(const Names& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Names* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name(int index, ::std::string&& value);
  #endif
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  #if LANG_CXX11
  void add_name(::std::string&& value);
  #endif
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:drpc.Names)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> name_;
  friend struct ::TableStruct_packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Names

// repeated string name = 1;
inline int Names::name_size() const {
  return name_.size();
}
inline void Names::clear_name() {
  name_.Clear();
}
inline const ::std::string& Names::name(int index) const {
  // @@protoc_insertion_point(field_get:drpc.Names.name)
  return name_.Get(index);
}
inline ::std::string* Names::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:drpc.Names.name)
  return name_.Mutable(index);
}
inline void Names::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:drpc.Names.name)
  name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Names::set_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:drpc.Names.name)
  name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Names::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:drpc.Names.name)
}
inline void Names::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:drpc.Names.name)
}
inline ::std::string* Names::add_name() {
  // @@protoc_insertion_point(field_add_mutable:drpc.Names.name)
  return name_.Add();
}
inline void Names::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:drpc.Names.name)
}
#if LANG_CXX11
inline void Names::add_name(::std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:drpc.Names.name)
}
#endif
inline void Names::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:drpc.Names.name)
}
inline void Names::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:drpc.Names.name)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Names::name() const {
  // @@protoc_insertion_point(field_list:drpc.Names.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Names::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:drpc.Names.name)
  return &name_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace drpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_packet_2eproto
